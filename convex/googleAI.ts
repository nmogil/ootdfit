"use node";

import { v } from "convex/values";
import { internalAction } from "./_generated/server";
import { internal } from "./_generated/api";
import { GoogleGenAI } from "@google/genai";
// Note: Sharp image processing removed due to Convex runtime compatibility issues
// For now, we'll use the raw image data from Gemini

export const generateCollageWithGoogle = internalAction({
  args: { collageId: v.id("collages") },
  handler: async (ctx, args) => {
    try {
      const collage = await ctx.runQuery(internal.collages.getCollageForGeneration, {
        collageId: args.collageId,
      });

      if (!collage) {
        throw new Error("Collage not found");
      }

      // Setup API key
      const apiKey = process.env.GOOGLE_AI_API_KEY;
      if (!apiKey) {
        throw new Error("GOOGLE_AI_API_KEY is not set. Please configure your Convex env.");
      }

      const ai = new GoogleGenAI({ apiKey });

      // Get the original image from storage
      const originalImageUrl = await ctx.storage.getUrl(collage.originalImageId);
      if (!originalImageUrl) {
        throw new Error("Original image not found");
      }

      // Fetch the original image and convert to base64
      const imageResponse = await fetch(originalImageUrl);
      const imageBuffer = await imageResponse.arrayBuffer();
      const base64Image = Buffer.from(imageBuffer).toString('base64');

      // Enhanced prompt for better collage generation
      const enhancementPrompt = `${collage.prompt}

Please create a stylish fashion mood board collage that incorporates elements from the uploaded outfit photo. The collage should:
- Feature the original outfit as inspiration
- Include artistic cutouts, illustrations, and design elements
- Have a cohesive ${collage.style} aesthetic
- Include stylish typography and labels
- Be optimized for social media sharing (1080x1080)
- Look professional and visually appealing

Make it look like a high-end fashion magazine mood board with clean layout and good composition.`;

      // Prepare content with text prompt and base64 image
      const contents = [
        { text: enhancementPrompt },
        {
          inlineData: {
            mimeType: "image/png",
            data: base64Image,
          },
        },
      ];

      // Make the API call using Gemini
      const genResponse = await ai.models.generateContent({
        model: "gemini-2.5-flash-image-preview",
        contents,
      });

      if (!genResponse.candidates?.[0]?.content?.parts?.[0]) {
        throw new Error("No content generated by Gemini");
      }

      const candidates = genResponse.candidates ?? [];
      if (candidates.length === 0) throw new Error("Gemini returned no candidates");

      // Find first inlineData part with image data (based on working example)
      let b64Out: string | null = null;
      const parts: Array<any> = candidates[0].content?.parts ?? [];
      for (const part of parts) {
        const inline = part.inlineData as { data?: string } | undefined;
        if (inline?.data) {
          b64Out = inline.data;
          break;
        }
      }

      if (!b64Out) throw new Error("Gemini response did not include image data");

      // Convert base64 to blob (simplified version without Sharp due to Convex limitations)
      const generatedImageBuffer = Buffer.from(b64Out, 'base64');
      const blob = new Blob([new Uint8Array(generatedImageBuffer)], { type: "image/png" });
      
      // Store the generated image
      const collageImageId = await ctx.storage.store(blob);

      // Update collage status
      await ctx.runMutation(internal.collages.updateCollageStatus, {
        collageId: args.collageId,
        status: "completed",
        collageImageId,
      });

    } catch (error) {
      console.error("Error generating collage:", error);
      const errorMessage = error instanceof Error ? error.message : "Unknown error";
      await ctx.runMutation(internal.collages.updateCollageStatus, {
        collageId: args.collageId,
        status: "failed",
        errorMessage,
      });
    }
  },
});
